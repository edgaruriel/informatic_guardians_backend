require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/schedules", type: :request do

  let(:valid_headers) {
    {}
  }

  describe "GET /show" do
    it "Should return empty array schedules structure" do
      service_contract = FactoryBot.create(:service_contract, :with_contract_days)
      start_date = Date.current.next_week.beginning_of_week
      end_date = Date.current.next_week.end_of_week

      get v1_schedules_url(service_contract_id: service_contract.id, start_date: start_date, end_date: end_date), as: :json
      expect(response).to have_http_status(200)
      expect(JSON.parse(response.body)).to eq([])
    end

    it "Should return schedules structure " do
      service_contract = FactoryBot.create(:service_contract, :complete_exercise)
      start_date = Date.current.next_week.beginning_of_week
      end_date = Date.current.next_week.end_of_week
      result = Schedule::GetSchedulesService.new(service_contract, start_date, end_date).perform
      data_expect = (result.success?)? result.schedules_array_hash : {}

      get v1_schedules_url(service_contract_id: service_contract.id, start_date: start_date, end_date: end_date), as: :json
      expect(response).to have_http_status(200)
      expect(JSON.parse(response.body)).to eq(JSON.parse(data_expect.to_json))
    end
  end

  describe "POST /create" do
    it "With invalid parameters" do
      FactoryBot.create(:employee)
      service_contract = FactoryBot.create(:service_contract, :with_contract_days)

      start_date = Date.current.beginning_of_week
      end_date = Date.current.end_of_week

      post v1_schedules_url,
           params: { service_contract_id: service_contract.id, start_date: start_date, end_date: end_date }, headers: valid_headers, as: :json

      expect(response).to have_http_status(:unprocessable_entity)
    end

    it "With valid parameters" do
      FactoryBot.create(:employee)
      service_contract = FactoryBot.create(:service_contract, :with_contract_days)
      start_date = Date.current.next_week.beginning_of_week
      end_date = Date.current.next_week.end_of_week
      post v1_schedules_url,
           params: { service_contract_id: service_contract.id, start_date: start_date, end_date: end_date }, headers: valid_headers, as: :json

      expect(response).to have_http_status(:created)
    end
  end

  let(:schedule_assignment) do
    days_week = { monday: "1", tuesday: "2", wednesday: "3", thursday: "4", friday: "5", saturday: "6", sunday: "7"}
    employee_ernesto = Employee.find_by(name: "Ernesto")
    employee_barbara = Employee.find_by(name: "Barbara")
    employee_banjamin = Employee.find_by(name: "Benjamin")

    set_data = Hash.new
    set_data["#{days_week[:monday]}"] = Hash.new
    set_data["#{days_week[:monday]}"]["#{employee_banjamin.id.to_s}"] = { all_day: true, times: [], confirm_all_day: true }
    set_data["#{days_week[:tuesday]}"] = Hash.new
    set_data["#{days_week[:tuesday]}"]["#{employee_ernesto.id.to_s}"] = { all_day: true, times: [], confirm_all_day: true }
    set_data["#{days_week[:tuesday]}"]["#{employee_barbara.id.to_s}"] = { all_day: true, times: [], confirm_all_day: false }
    set_data["#{days_week[:tuesday]}"]["#{employee_banjamin.id.to_s}"] = { all_day: true, times: [], confirm_all_day: false }
    set_data["#{days_week[:wednesday]}"] = Hash.new
    set_data["#{days_week[:wednesday]}"]["#{employee_barbara.id.to_s}"] = { all_day: true, times: [], confirm_all_day: false }
    set_data["#{days_week[:wednesday]}"]["#{employee_banjamin.id.to_s}"] = { all_day: true, times: [], confirm_all_day: true }
    set_data["#{days_week[:thursday]}"] = Hash.new
    set_data["#{days_week[:thursday]}"]["#{employee_ernesto.id.to_s}"] = { all_day: true, times: [], confirm_all_day: true }
    set_data["#{days_week[:thursday]}"]["#{employee_barbara.id.to_s}"] = { all_day: true, times: [], confirm_all_day: false }
    set_data["#{days_week[:thursday]}"]["#{employee_banjamin.id.to_s}"] = { all_day: true, times: [], confirm_all_day: false }
    set_data["#{days_week[:friday]}"] = Hash.new
    set_data["#{days_week[:friday]}"]["#{employee_ernesto.id.to_s}"] = { all_day: true, times: [], confirm_all_day: false }
    set_data["#{days_week[:friday]}"]["#{employee_barbara.id.to_s}"] = { all_day: true, times: [], confirm_all_day: true }
    set_data["#{days_week[:saturday]}"] = Hash.new
    set_data["#{days_week[:saturday]}"]["#{employee_ernesto.id.to_s}"] = {
      all_day: false,
      times: %w[10:00-11:00 11:00-12:00 12:00-13:00 13:00-14:00 14:00-15:00],
      confirm_all_day: false,
      times_confirmed_expected: %w[10:00-11:00 11:00-12:00 12:00-13:00 13:00-14:00 14:00-15:00]
    }
    set_data["#{days_week[:saturday]}"]["#{employee_barbara.id.to_s}"] = {
      all_day: false,
      times: %w[18:00-19:00 19:00-20:00 20:00-21:00],
      confirm_all_day: false,
      times_confirmed_expected: []
    }
    set_data["#{days_week[:saturday]}"]["#{employee_banjamin.id.to_s}"] = {
      all_day: false,
      times: %w[18:00-19:00 19:00-20:00 20:00-21:00 21:00-22:00 22:00-23:00 23:00-00:00],
      confirm_all_day: false,
      times_confirmed_expected: %w[18:00-19:00 19:00-20:00 20:00-21:00 21:00-22:00 22:00-23:00 23:00-00:00]
    }
    set_data["#{days_week[:sunday]}"] = {}
    set_data["#{days_week[:sunday]}"]["#{employee_barbara.id.to_s}"] = { all_day: true, times: [], confirm_all_day: true }
    set_data
  end

  describe "POST /update" do
    it "With invalid parameters" do
      service_contract = FactoryBot.create(:service_contract, :complete_exercise)
      start_date = Date.current.next_week.beginning_of_week
      end_date = Date.current.next_week.end_of_week
      schedules_wrong_structure_data = [{"date": "2022-03-21 00:00:00", "times": ["start": "19:00", "end": "20:00"]}]

      put v1_schedules_url,
           params: { service_contract_id: service_contract.id, start_date: start_date, end_date: end_date, schedules: schedules_wrong_structure_data }, headers: valid_headers, as: :json
      expect(response).to have_http_status(:unprocessable_entity)
    end

    it "With valid parameters" do
      service_contract = FactoryBot.create(:service_contract, :complete_exercise)
      start_date = Date.current.next_week.beginning_of_week
      end_date = Date.current.next_week.end_of_week
      result = Schedule::GetSchedulesService.new(service_contract, start_date, end_date).perform
      schedule_array = (result.success?)? result.schedules_array_hash : {}

      put v1_schedules_url,
          params: { service_contract_id: service_contract.id, start_date: start_date, end_date: end_date, schedules: schedule_array }, headers: valid_headers, as: :json

      expect(response).to have_http_status(200)
    end

    it "Should return confirmed schedules structure" do
      service_contract = FactoryBot.create(:service_contract, :complete_exercise)
      start_date = Date.current.next_week.beginning_of_week
      end_date = Date.current.next_week.end_of_week
      result = Schedule::GetSchedulesService.new(service_contract, start_date, end_date).perform
      schedule_array = (result.success?)? result.schedules_array_hash : {}

      assignment = schedule_assignment
      schedule_confirmed_expect = JSON.parse(schedule_array.to_json) # copy all structure
      schedule_array.each_with_index do |schedule_day, schedule_day_index|
        day_num = Date.parse(schedule_day[:date]).cwday
        info_day = assignment[day_num.to_s]
        schedule_day[:times].each_with_index do |schedule_time, schedule_time_index|
          schedule_time[:employees].each_with_index do |employee, employee_index|
            employee_times = info_day[employee[:employee_id].to_s] || nil
            is_confirmed_expect = false
            unless employee_times.nil?
              if employee_times[:all_day]
                employee[:checked] = true
                is_confirmed_expect = true if employee_times[:confirm_all_day]
              else
                time_range = "#{schedule_time[:start_time]}-#{schedule_time[:end_time]}"
                employee[:checked] = true if employee_times[:times].include?(time_range)
                is_confirmed_expect = true if employee_times[:times_confirmed_expected].include?(time_range)
              end
              schedule_confirmed_expect[schedule_day_index]["times"][schedule_time_index]["employees"][employee_index]["checked"] = employee[:checked]
            end
            schedule_confirmed_expect[schedule_day_index]["times"][schedule_time_index]["employees"][employee_index]["is_confirmed"] = is_confirmed_expect
          end
        end
      end

      put v1_schedules_url,
          params: { service_contract_id: service_contract.id, start_date: start_date, end_date: end_date, schedules: schedule_array }, headers: valid_headers, as: :json

      response_json = JSON.parse(response.body)
      expect(response).to have_http_status(200)
      expect(JSON.parse(response.body)).to eq(schedule_confirmed_expect)
    end
  end

  describe "GET /rank_date" do
    it "Should return date range allowed" do
      service_contract = FactoryBot.create(:service_contract, :complete_exercise)
      start_date = Date.current.next_week.beginning_of_week
      end_date = Date.current.end_of_week + 5.weeks
      date_range_expect = {start_date: start_date, end_date: end_date}

      get rank_dates_v1_schedules_url(service_contract_id: service_contract.id, start_date: start_date, end_date: end_date), as: :json
      expect(response).to have_http_status(200)
      expect(JSON.parse(response.body)).to eq(JSON.parse(date_range_expect.to_json))
    end
  end
end
